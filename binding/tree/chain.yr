mod binding::tree::chain;

import binding::tree::c_tree;

pub class TreeChain {
    let mut _first : tree_t = null;
    let mut _last : tree_t = null;

    pub self () {}

    pub def append (mut self, t : tree_t)-> dmut &TreeChain {
        if (t is null) { __pragma!panic (); }
        if (self._first is null) {
            self._first = t;
            self._last = t;
        } else {
            c_binding_tree_chain_set (self._last, t);
            self._last = t;
        }

        return alias self;
    }

    pub def getTree (self)-> tree_t {
        return self._first;
    }

}

pub class BlockChain {
    let mut _first : tree_t = null;
    let mut _last : tree_t = null;

    pub self () {}

    pub def append (mut self, t : tree_t)-> dmut &BlockChain {
        if (t is null) { __pragma!panic (); }
        if (self._first is null) {
            self._first = t;
            self._last = t;
        } else {
            c_binding_block_chain_set (self._last, t);
            self._last = t;
        }

        return alias self;
    }

    pub def getTree (self)-> tree_t {
        return self._first;
    }

}

pub struct
| bind : tree_t
| block : tree_t
 -> TreeSymbolMapping;
